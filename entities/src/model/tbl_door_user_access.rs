//! SeaORM Entity. Generated by sea-orm-codegen 0.9.2

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Serialize, Deserialize)]
#[sea_orm(table_name = "tbl_door_user_access")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub door_id: Uuid,
    #[sea_orm(primary_key, auto_increment = false)]
    pub user_id: Uuid,
    pub due_at: Option<DateTime>,
    pub lent_at: Option<DateTime>,
    pub lent: Option<bool>,
    pub is_active: Option<bool>,
    pub has_problem: Option<bool>,
    #[sea_orm(column_type = "Text", nullable)]
    pub comment: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::tbl_door::Entity",
        from = "Column::DoorId",
        to = "super::tbl_door::Column::DoorId",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    TblDoor,
    #[sea_orm(
        belongs_to = "super::tbl_user::Entity",
        from = "Column::UserId",
        to = "super::tbl_user::Column::UserId",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    TblUser,
}

impl Related<super::tbl_door::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::TblDoor.def()
    }
}

impl Related<super::tbl_user::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::TblUser.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
