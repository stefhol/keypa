//! SeaORM Entity. Generated by sea-orm-codegen 0.9.2

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Serialize, Deserialize)]
#[sea_orm(table_name = "tbl_key_group_key")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub key_id: Uuid,
    #[sea_orm(primary_key, auto_increment = false)]
    pub key_group_id: Uuid,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::tbl_key_group::Entity",
        from = "Column::KeyGroupId",
        to = "super::tbl_key_group::Column::KeyGroupId",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    TblKeyGroup,
    #[sea_orm(
        belongs_to = "super::tbl_key::Entity",
        from = "Column::KeyId",
        to = "super::tbl_key::Column::KeyId",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    TblKey,
}

impl Related<super::tbl_key_group::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::TblKeyGroup.def()
    }
}

impl Related<super::tbl_key::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::TblKey.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
