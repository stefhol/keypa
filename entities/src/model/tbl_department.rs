//! `SeaORM` Entity. Generated by sea-orm-codegen 0.10.6

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "tbl_department")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub department_id: Uuid,
    #[sea_orm(unique)]
    pub name: String,
    #[sea_orm(column_type = "Text", nullable)]
    pub description: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {}

impl Related<super::tbl_room::Entity> for Entity {
    fn to() -> RelationDef {
        super::tbl_room_department::Relation::TblRoom.def()
    }
    fn via() -> Option<RelationDef> {
        Some(
            super::tbl_room_department::Relation::TblDepartment
                .def()
                .rev(),
        )
    }
}

impl Related<super::tbl_request::Entity> for Entity {
    fn to() -> RelationDef {
        super::tbl_request_department::Relation::TblRequest.def()
    }
    fn via() -> Option<RelationDef> {
        Some(
            super::tbl_request_department::Relation::TblDepartment
                .def()
                .rev(),
        )
    }
}

impl ActiveModelBehavior for ActiveModel {}
