//! SeaORM Entity. Generated by sea-orm-codegen 0.9.2

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Serialize, Deserialize)]
#[sea_orm(table_name = "tbl_keycard_request")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub request_id: Uuid,
    pub keycard_id: Option<Uuid>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::tbl_keycard::Entity",
        from = "Column::KeycardId",
        to = "super::tbl_keycard::Column::KeycardId",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    TblKeycard,
    #[sea_orm(
        belongs_to = "super::tbl_request_base::Entity",
        from = "Column::RequestId",
        to = "super::tbl_request_base::Column::RequestId",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    TblRequestBase,
}

impl Related<super::tbl_keycard::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::TblKeycard.def()
    }
}

impl Related<super::tbl_request_base::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::TblRequestBase.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
