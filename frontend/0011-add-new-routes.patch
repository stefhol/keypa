From 5a8d60c3d62d4dc9271eb3721f196bc23c51b36f Mon Sep 17 00:00:00 2001
From: stefhol <hoef.stef@pm.me>
Date: Mon, 14 Nov 2022 11:15:42 +0100
Subject: [PATCH 11/11] add new routes

---
 api/src/api/door.rs                           |  30 ++++-
 api/src/api/request.rs                        |  45 ++++++-
 api/src/crud/access.rs                        |  41 +++++-
 api/src/crud/request.rs                       |  95 ++++++++++----
 api/src/main.rs                               |   8 ++
 frontend/src/css/comment.css                  |  44 +++++++
 frontend/src/index.css                        |   6 +
 frontend/src/main.tsx                         |  20 +++
 frontend/src/routes/Main.tsx                  |   1 -
 frontend/src/routes/user/UseChange.tsx        |  21 ++-
 frontend/src/routes/worker/ChangeRequest.tsx  | 122 ++++++++++++++++++
 .../src/routes/worker/ShowPendingRequests.tsx |  15 +++
 frontend/src/routes/worker/WorkerBase.tsx     |  10 ++
 frontend/src/util/Rest.ts                     |  11 +-
 frontend/src/util/intefaces/Request.ts        |   3 +-
 15 files changed, 429 insertions(+), 43 deletions(-)
 create mode 100644 frontend/src/css/comment.css
 create mode 100644 frontend/src/routes/worker/ChangeRequest.tsx
 create mode 100644 frontend/src/routes/worker/ShowPendingRequests.tsx
 create mode 100644 frontend/src/routes/worker/WorkerBase.tsx

diff --git a/api/src/api/door.rs b/api/src/api/door.rs
index 73edb31..e3fc3cb 100644
--- a/api/src/api/door.rs
+++ b/api/src/api/door.rs
@@ -1,6 +1,8 @@
-use actix_web::{get, web::Data, HttpResponse};
+use actix_web::{get, web::{Data, Path}, HttpResponse};
 use sea_orm::DatabaseConnection;
 
+use uuid::Uuid;
+
 use crate::{
     crud,
     util::{
@@ -26,6 +28,30 @@ pub async fn get_self_door(
 ) -> actix_web::Result<HttpResponse, CrudError> {
     auth.has_high_enough_security_level(SecurityLevel::User)?;
     let user_id = &auth.try_get_user_id()?;
-    let keys = crud::access::get_building_with_only_authorized_doors(user_id, &db).await?;
+    let keys =
+        crud::access::get_building_by_user_id_with_only_authorized_doors(user_id, &db).await?;
+    Ok(HttpResponse::Ok().json(keys))
+}
+#[utoipa::path(
+    context_path = "/api/v1",
+    responses(
+    (status = 200, body=[GetCompleteBuilding]),
+    (status = 400),
+    (status = 401),
+    (status = 404),
+    (status = 406),
+    (status = 500),
+)
+)]
+#[get("/doors/{door_group_id}")]
+pub async fn get_doors_of_door_group(
+    db: Data<DatabaseConnection>,
+    door_group_id: Path<Uuid>,
+    auth: Authenticated,
+) -> actix_web::Result<HttpResponse, CrudError> {
+    auth.has_high_enough_security_level(SecurityLevel::User)?;
+    let keys =
+        crud::access::get_building_by_door_group_with_only_authorized_doors(&door_group_id, &db)
+            .await?;
     Ok(HttpResponse::Ok().json(keys))
 }
diff --git a/api/src/api/request.rs b/api/src/api/request.rs
index 3fa9cb7..5967a00 100644
--- a/api/src/api/request.rs
+++ b/api/src/api/request.rs
@@ -48,7 +48,7 @@ pub async fn get_self_requests(
     (status = 500),
 )
 )]
-#[get("/request/{user_id}")]
+#[get("user/{user_id}/request/")]
 pub async fn get_requests_from_user(
     db: Data<DatabaseConnection>,
     user_id: Path<Uuid>,
@@ -98,7 +98,7 @@ pub async fn get_self_requests_from_request_id(
     (status = 500),
 )
 )]
-#[get("/request/{user_id}")]
+#[get("/user/{user_id}/request")]
 pub async fn get_single_requests_from_user(
     db: Data<DatabaseConnection>,
     user_id: Path<Uuid>,
@@ -114,3 +114,44 @@ pub async fn get_single_requests_from_user(
     .await?;
     Ok(HttpResponse::Ok().json(request))
 }
+#[utoipa::path(
+    context_path = "/api/v1",
+    responses(
+    (status = 200, body = [GetRequestWithComments]),
+    (status = 400),
+    (status = 401),
+    (status = 404),
+    (status = 406),
+    (status = 500),
+)
+)]
+#[get("/request")]
+pub async fn get_all_pending_requests(
+    db: Data<DatabaseConnection>,
+    auth: Authenticated,
+) -> actix_web::Result<HttpResponse, CrudError> {
+    auth.has_high_enough_security_level(SecurityLevel::User)?;
+    let request = crud::request::get_all_open_requests(&db).await?;
+    Ok(HttpResponse::Ok().json(request))
+}
+#[utoipa::path(
+    context_path = "/api/v1",
+    responses(
+    (status = 200, body = GetRequestWithComments),
+    (status = 400),
+    (status = 401),
+    (status = 404),
+    (status = 406),
+    (status = 500),
+)
+)]
+#[get("/request/{request_id}")]
+pub async fn get_single_requests(
+    db: Data<DatabaseConnection>,
+    request_id: Path<Uuid>,
+    auth: Authenticated,
+) -> actix_web::Result<HttpResponse, CrudError> {
+    auth.has_high_enough_security_level(SecurityLevel::User)?;
+    let request = crud::request::get_single_request(&db, &request_id).await?;
+    Ok(HttpResponse::Ok().json(request))
+}
diff --git a/api/src/crud/access.rs b/api/src/crud/access.rs
index 1c56865..9bb8914 100644
--- a/api/src/crud/access.rs
+++ b/api/src/crud/access.rs
@@ -30,12 +30,47 @@ pub async fn get_doors_of_user_id(
 
     Ok(values.iter().map(|f| f.into()).collect())
 }
-pub async fn get_building_with_only_authorized_doors(
+pub async fn get_doors_of_door_group_id(
+    user_id: &Uuid,
+    db: &DatabaseConnection,
+) -> Result<Vec<GetDoor>, CrudError> {
+    let values = tbl_door::Entity::find()
+        .from_raw_sql(Statement::from_sql_and_values(
+            DbBackend::Postgres,
+            r#"select (tbl_door.*) from tbl_door_group
+            join tbl_door_to_group_door on tbl_door_group.door_group_id = tbl_door_to_group_door.door_group_id
+            join tbl_door on tbl_door.door_id = tbl_door.door_id
+            where tbl_door_group.door_group_id = $1"#,
+            vec![user_id.clone().into()],
+        ))
+        .all(db)
+        .await?;
+
+    Ok(values.iter().map(|f| f.into()).collect())
+}
+pub async fn get_building_by_user_id_with_only_authorized_doors(
     user_id: &Uuid,
     db: &DatabaseConnection,
 ) -> Result<Vec<GetCompleteBuilding>, CrudError> {
     let buildings = crud::building::get_building_complex(db).await?;
     let authorized_doors = get_doors_of_user_id(user_id, db).await?;
+    let filtered_buildings = get_only_authorized_complex_building(buildings, authorized_doors);
+    Ok(filtered_buildings)
+    // Ok(values.iter().map(|f| f.into()).collect())
+}
+pub async fn get_building_by_door_group_with_only_authorized_doors(
+    door_group_id: &Uuid,
+    db: &DatabaseConnection,
+) -> Result<Vec<GetCompleteBuilding>, CrudError> {
+    let buildings = crud::building::get_building_complex(db).await?;
+    let authorized_doors = get_doors_of_door_group_id(door_group_id, db).await?;
+    let filtered_buildings = get_only_authorized_complex_building(buildings, authorized_doors);
+    Ok(filtered_buildings)
+}
+fn get_only_authorized_complex_building(
+    buildings: Vec<GetCompleteBuilding>,
+    authorized_doors: Vec<GetDoor>,
+) -> Vec<GetCompleteBuilding> {
     let mut filtered_buildings = vec![];
     for builing in buildings {
         let mut rooms = vec![];
@@ -62,7 +97,5 @@ pub async fn get_building_with_only_authorized_doors(
             filtered_buildings.push(GetCompleteBuilding { rooms, ..builing })
         }
     }
-
-    Ok(filtered_buildings)
-    // Ok(values.iter().map(|f| f.into()).collect())
+    filtered_buildings
 }
diff --git a/api/src/crud/request.rs b/api/src/crud/request.rs
index e7035d5..8fa5286 100644
--- a/api/src/crud/request.rs
+++ b/api/src/crud/request.rs
@@ -1,20 +1,21 @@
-use std::collections::HashMap;
-
+use crate::crud;
+use crate::util::error::CrudError;
 use chrono::{DateTime, Utc};
 use entities::model::{tbl_request, tbl_request_comment};
-use sea_orm::{prelude::DateTimeUtc, ColumnTrait, DatabaseConnection, EntityTrait, QueryFilter};
+use sea_orm::{
+    prelude::DateTimeUtc, ColumnTrait, DatabaseConnection, EntityTrait, QueryFilter, QueryOrder,
+};
 use serde::{Deserialize, Serialize};
 use utoipa::ToSchema;
 use uuid::Uuid;
 
-use crate::util::error::CrudError;
-
 use super::user::GetUser;
 
 #[derive(Serialize, Deserialize, Debug, ToSchema, Clone)]
 pub struct GetRequestWithComments {
     pub request_id: Uuid,
     pub requester_id: Uuid,
+    pub requester: Option<GetUser>,
     pub door_group_id: Uuid,
     pub created_at: DateTimeUtc,
     pub changed_at: DateTimeUtc,
@@ -29,6 +30,7 @@ impl From<(&tbl_request::Model, &Vec<GetComments>)> for GetRequestWithComments {
         Self {
             request_id: request.request_id.clone(),
             requester_id: request.requester_id.clone(),
+            requester: None,
             door_group_id: request.door_group_id.clone(),
             created_at: DateTime::from_local(request.created_at.clone(), Utc),
             changed_at: DateTime::from_local(request.changed_at.clone(), Utc),
@@ -45,6 +47,28 @@ impl From<&tbl_request::Model> for GetRequestWithComments {
         Self {
             request_id: request.request_id.clone(),
             requester_id: request.requester_id.clone(),
+            requester: None,
+            door_group_id: request.door_group_id.clone(),
+            created_at: DateTime::from_local(request.created_at.clone(), Utc),
+            changed_at: DateTime::from_local(request.changed_at.clone(), Utc),
+            description: request.description.clone(),
+            accept: request.accept.clone(),
+            reject: request.reject.clone(),
+            pending: request.pending.clone(),
+            comments: vec![],
+        }
+    }
+}
+impl From<(&tbl_request::Model, &Vec<GetUser>)> for GetRequestWithComments {
+    fn from((request, user): (&tbl_request::Model, &Vec<GetUser>)) -> Self {
+        let user = user
+            .iter()
+            .find(|f| f.user_id == request.requester_id)
+            .cloned();
+        Self {
+            request_id: request.request_id.clone(),
+            requester_id: request.requester_id.clone(),
+            requester: user,
             door_group_id: request.door_group_id.clone(),
             created_at: DateTime::from_local(request.created_at.clone(), Utc),
             changed_at: DateTime::from_local(request.changed_at.clone(), Utc),
@@ -65,13 +89,16 @@ pub struct GetComments {
     pub comment: String,
     pub written_at: DateTimeUtc,
 }
-impl From<(&tbl_request_comment::Model, &HashMap<Uuid, GetUser>)> for GetComments {
-    fn from((comment, user_map): (&tbl_request_comment::Model, &HashMap<Uuid, GetUser>)) -> Self {
+impl From<(&tbl_request_comment::Model, &Vec<GetUser>)> for GetComments {
+    fn from((comment, user_map): (&tbl_request_comment::Model, &Vec<GetUser>)) -> Self {
         GetComments {
             comment_id: comment.comment_id.clone(),
             request_id: comment.request_id.clone(),
             user_id: comment.user_id.clone(),
-            user: user_map.get(&comment.user_id).cloned(),
+            user: user_map
+                .iter()
+                .find(|f| &f.user_id == &comment.user_id)
+                .cloned(),
             comment: comment.comment.clone(),
             written_at: DateTimeUtc::from_utc(comment.written_at.clone(), Utc),
         }
@@ -93,27 +120,45 @@ pub async fn get_request_from_user_id_and_request_id(
     user_id: &Uuid,
     request_id: &Uuid,
     db: &DatabaseConnection,
+) -> Result<GetRequestWithComments, CrudError> {
+    let request = get_single_request(db, request_id).await?;
+    if &request.requester_id == user_id {
+        return Ok(request);
+    }
+    Err(CrudError::NotFound)
+}
+pub async fn get_all_open_requests(
+    db: &DatabaseConnection,
+) -> Result<Vec<GetRequestWithComments>, CrudError> {
+    let model = tbl_request::Entity::find()
+        .filter(tbl_request::Column::Pending.eq(true))
+        .all(db)
+        .await?;
+    let user_vec = crud::user::get_all_user(db).await?;
+    Ok(model
+        .iter()
+        .map(|f| GetRequestWithComments::from((f, &user_vec)))
+        .collect())
+}
+pub async fn get_single_request(
+    db: &DatabaseConnection,
+    request_id: &Uuid,
 ) -> Result<GetRequestWithComments, CrudError> {
     let model = tbl_request::Entity::find_by_id(request_id.clone())
-        .filter(tbl_request::Column::RequesterId.eq(user_id.clone()))
         .one(db)
         .await?;
-    if let Some(model) = model {
-        let comments = tbl_request_comment::Entity::find()
-            .filter(tbl_request_comment::Column::RequestId.eq(request_id.clone()))
-            .all(db)
-            .await?;
-        let mut user_map: HashMap<Uuid, GetUser> = HashMap::new();
-        //get all users
-        for comment in &comments {
-            if !user_map.contains_key(&comment.user_id) {
-                let user = super::user::get_single_user(db, &comment.user_id).await?;
-                user_map.insert(comment.user_id.clone(), user);
-            }
+    match &model {
+        Some(request) => {
+            let comments = tbl_request_comment::Entity::find()
+                .filter(tbl_request_comment::Column::RequestId.eq(request.request_id.clone()))
+                .order_by_asc(tbl_request_comment::Column::WrittenAt)
+                .all(db)
+                .await?;
+            let user_vec = crud::user::get_all_user(db).await?;
+            let mut request = GetRequestWithComments::from((request, &user_vec));
+            request.comments = comments.iter().map(|f| (f, &user_vec).into()).collect();
+            Ok(request)
         }
-        let comments: Vec<GetComments> = comments.iter().map(|f| (f, &user_map).into()).collect();
-        return Ok((&model, &comments).into());
-    } else {
-        return Err(CrudError::NotFound);
+        None => Err(CrudError::NotFound),
     }
 }
diff --git a/api/src/main.rs b/api/src/main.rs
index 8e1c85c..ef1dd00 100644
--- a/api/src/main.rs
+++ b/api/src/main.rs
@@ -34,6 +34,8 @@ use utoipa::{OpenApi, openapi::{Server, Info}};
         api::worker::delete_worker,
         //key
         api::door::get_self_door,
+        api::door::get_doors_of_door_group,
+        
         //key_group
         api::door_group::add_key_into_key_group,
         api::door_group::delete_key_from_key_group,
@@ -47,6 +49,9 @@ use utoipa::{OpenApi, openapi::{Server, Info}};
         api::request::get_single_requests_from_user,
         api::request::get_self_requests_from_request_id,
         api::building::get_buldings,
+        api::request::get_all_pending_requests,
+        api::request::get_single_requests,
+        
     ),
     components(schemas(
         api::auth::Login,
@@ -120,6 +125,7 @@ async fn main() -> anyhow::Result<()> {
                     .service(api::worker::delete_worker)
                     //key
                     .service(api::door::get_self_door)
+                    .service(api::door::get_doors_of_door_group)
                     //key_group
                     .service(api::door_group::add_key_into_key_group)
                     .service(api::door_group::delete_key_from_key_group)
@@ -133,6 +139,8 @@ async fn main() -> anyhow::Result<()> {
                     .service(api::request::get_requests_from_user)
                     .service(api::request::get_single_requests_from_user)
                     .service(api::request::get_self_requests_from_request_id)
+                    .service(api::request::get_all_pending_requests)
+                    .service(api::request::get_single_requests)
                     // building
                     .service(api::building::get_buldings)
                 ,
diff --git a/frontend/src/css/comment.css b/frontend/src/css/comment.css
new file mode 100644
index 0000000..d91d44b
--- /dev/null
+++ b/frontend/src/css/comment.css
@@ -0,0 +1,44 @@
+
+.comment {
+    display       : flex;
+    flex-direction: column;
+
+    width           : 180px;
+    height          : auto;
+    background-color: darkgrey;
+    color           : black;
+    padding         : 0.5rem;
+    position        : relative;
+    margin          : 1rem;
+    border-radius   : 10px;
+}
+
+.comment.blue {
+    background-color: lightblue;
+}
+
+.comment>.date {
+    font-size: smaller;
+}
+
+.comment.false:after {
+    content      : " ";
+    position     : absolute;
+    right        : -15px;
+    top          : 15px;
+    border-top   : 15px solid transparent;
+    border-right : none;
+    border-left  : 15px solid darkgrey;
+    border-bottom: 15px solid transparent;
+}
+
+.comment.blue:after {
+    content      : " ";
+    position     : absolute;
+    left         : -15px;
+    top          : 15px;
+    border-top   : 15px solid transparent;
+    border-right : 15px solid lightblue;
+    border-left  : none;
+    border-bottom: 15px solid transparent;
+}
\ No newline at end of file
diff --git a/frontend/src/index.css b/frontend/src/index.css
index 3eefe1a..b7fb0e9 100644
--- a/frontend/src/index.css
+++ b/frontend/src/index.css
@@ -63,11 +63,17 @@ h1 {
   line-height: 1.1;
 }
 
+select,
 input {
   height: 2rem;
   width : 15rem;
   margin: 0.5rem;
 }
+input[type="checkbox"] {
+  height: 1rem;
+  width : 1rem;
+
+}
 
 button {
   border-radius   : 8px;
diff --git a/frontend/src/main.tsx b/frontend/src/main.tsx
index 09b0c4c..8ba8525 100644
--- a/frontend/src/main.tsx
+++ b/frontend/src/main.tsx
@@ -22,6 +22,9 @@ import { UserBase } from './routes/user/UserBase';
 import { ShowAllUsers } from './routes/leader/ShowAllUsers';
 import { User } from './routes/user/User';
 import { UserChange as UserChange } from './routes/user/UseChange';
+import { WorkerBase } from './routes/worker/WorkerBase';
+import { ShowPendingRequests } from './routes/worker/ShowPendingRequests';
+import { ChangeRequest } from './routes/worker/ChangeRequest';
 const router = createBrowserRouter([
   {
     path: "/",
@@ -72,6 +75,23 @@ const router = createBrowserRouter([
             element: <ChangeWorker />
           }
         ]
+      },
+      {
+        path: "worker",
+        element: <WorkerBase />,
+        children: [
+          {
+            path: "",
+            element: <ShowPendingRequests />
+
+          },
+          {
+            path: "change-request/:requestId",
+            element: <ChangeRequest />
+
+          },
+
+        ]
       }
     ]
   }
diff --git a/frontend/src/routes/Main.tsx b/frontend/src/routes/Main.tsx
index 95401ed..16cef47 100644
--- a/frontend/src/routes/Main.tsx
+++ b/frontend/src/routes/Main.tsx
@@ -7,7 +7,6 @@ export const Main: React.FC<MainProps> = (props) => {
 
     return (<main>
         <LogoFull width={300} /><br />
-        <a href="/login">Zum Login</a><br />
         <a href="/dashboard">Zum Dashboard</a>
         <p>
             Universitäten sind heutzutage immer auf der Suche nach Wegen, um die Sicherheit zu verbessern. Ein Schlüsselverwaltungssystem ist eine gute Möglichkeit, um den Überblick über die vielen Schlüssel zu behalten, die im Umlauf sind. Mit einem Schlüsselverwaltungssystem können Sie den Zugriff auf bestimmte Bereiche einschränken und so die Sicherheit erhöhen.
diff --git a/frontend/src/routes/user/UseChange.tsx b/frontend/src/routes/user/UseChange.tsx
index b475ee8..151dca4 100644
--- a/frontend/src/routes/user/UseChange.tsx
+++ b/frontend/src/routes/user/UseChange.tsx
@@ -1,5 +1,6 @@
 import { useQuery } from "@tanstack/react-query"
 import { useNavigate } from "react-router-dom"
+import { User } from "../../util/intefaces/Request"
 import { Rest } from "../../util/Rest"
 
 export interface UserChangeProps { }
@@ -10,15 +11,21 @@ export const UserChange: React.FC<UserChangeProps> = (props) => {
         <h1>Account</h1>
         {data &&
             <>
-                <p>
-                    Name: {data.name}<br />
-                    Email: {data.email}<br />
-                    Berufsbezeichnung: {data.role.name} <br />
-                    Ist momentan Verwaltungsmitarbeiter:
-                    {data.worker ? "Ja" : "Nein"}
-                </p>
+                <UserInfo data={data} />
                 <button onClick={(e) => navigate("/")}>Inaktiv schalten</button>
             </>
         }
     </>)
+}
+export interface UserInfoProps { data: User }
+export const UserInfo: React.FC<UserInfoProps> = ({ data }) => {
+
+    return (<>
+        <p>
+            Name: {data.name}<br />
+            Email: {data.email}<br />
+            Berufsbezeichnung: {data.role.name} <br />
+            Ist momentan Verwaltungsmitarbeiter:
+            {data.worker ? "Ja" : "Nein"}
+        </p></>)
 }
\ No newline at end of file
diff --git a/frontend/src/routes/worker/ChangeRequest.tsx b/frontend/src/routes/worker/ChangeRequest.tsx
new file mode 100644
index 0000000..6e0dfed
--- /dev/null
+++ b/frontend/src/routes/worker/ChangeRequest.tsx
@@ -0,0 +1,122 @@
+import { useQuery } from "@tanstack/react-query"
+import { format } from "date-fns"
+import React from "react"
+import { useParams } from "react-router-dom"
+import { Comment, Request } from "../../util/intefaces/Request"
+import { Rest } from "../../util/Rest"
+import { UserInfo } from "../user/UseChange"
+import "../../css/comment.css"
+import { BuildingFC } from "../user/keys/Key"
+import { prepareData } from "../user/request/Request"
+export interface ChangeRequestProps { }
+const getUser = async ({ queryKey }: { queryKey: string[] }) => {
+    const userId = queryKey[1]
+    return await Rest.getSingleUser(userId)
+}
+const getRequest = async ({ queryKey }: { queryKey: string[] }) => {
+    const requestId = queryKey[1]
+    return await Rest.getSingleRequest(requestId)
+}
+const getBuildingWithDoorGroups = async ({ queryKey }: { queryKey: string[] }) => {
+    const doorGroupId = queryKey[1]
+    return await Rest.getDoorsWithDoorGroupId(doorGroupId)
+}
+export const ChangeRequest: React.FC<ChangeRequestProps> = (props) => {
+    const { requestId } = useParams()
+
+    const { data: request } = useQuery(["request", requestId || ""], getRequest)
+
+    return (<>
+        {request &&
+            <ChangeRequestForm data={request} />
+        }
+    </>)
+}
+
+export interface ChangeRequestFormProps { data: Request, }
+export const ChangeRequestForm: React.FC<ChangeRequestFormProps> = (props) => {
+    const { data: building } = useQuery(["building", props.data.door_group_id], getBuildingWithDoorGroups)
+
+    const [accept, setAccept] = React.useState(props.data.accept);
+    const [reject, setReject] = React.useState(props.data.reject);
+    const [pending, setPending] = React.useState(props.data.pending);
+    return (<>
+        <form>
+            <UserInfo data={props.data.requester} />
+
+            <h2>Beschreibung</h2>
+            <p>{props.data.description}</p>
+            <label>
+                Status:
+                <select name="status" onChange={(e) => {
+                    let value = e.target.value
+                    if (value === "1") {
+                        setAccept(true)
+                        setReject(false)
+                        setPending(false)
+                    }
+                    if (value === "2") {
+                        setAccept(false)
+                        setReject(true)
+                        setPending(false)
+                    }
+                    if (value === "3") {
+                        setAccept(false)
+                        setReject(false)
+                        setPending(true)
+                    }
+                }}>
+                    <option value="1" selected={accept}>Akzeptieren</option>
+                    <option value="2" selected={reject}>Ablehnen</option>
+                    <option value="3" selected={pending}>Ausstehend</option>
+                </select>
+            </label>
+            <BuildingFC value={prepareData(building || [])} />
+
+            <button>
+                Aenderung Speichern
+            </button>
+            <CommentBoxFC
+                data={props.data.comments || []}
+                requester={props.data.requester_id}
+            />
+        </form>
+    </>)
+}
+
+export interface CommentProps {
+    isRequester: boolean,
+    comment: Comment
+}
+export const CommentFC: React.FC<CommentProps> = (props) => {
+
+    return (<>
+        <div className={`comment ${props.isRequester && "blue"}`}>
+            <span><strong>{props.comment.user.name}</strong></span>
+            <span>{props.comment.comment}</span>
+            <span className="date">{format(new Date(props.comment.written_at), "dd.MM.yyyy hh:mm")}</span>
+        </div>
+    </>)
+}
+export interface CommentBoxProps {
+    data: Comment[]
+    requester: string
+}
+export const CommentBoxFC: React.FC<CommentBoxProps> = (props) => {
+    const [newComment, setNewComment] = React.useState("");
+    return (<>
+        {props.data.map(val => <CommentFC
+            comment={val}
+            isRequester={val.user_id === props.requester}
+        />)}
+        <div>
+            Antwort:
+            <textarea
+                value={newComment}
+                onChange={(e) => setNewComment(e.target.value)}
+            />
+
+        </div>
+        <button onClick={(e) => { e.preventDefault() }}>Sende Nachricht</button>
+    </>)
+}
\ No newline at end of file
diff --git a/frontend/src/routes/worker/ShowPendingRequests.tsx b/frontend/src/routes/worker/ShowPendingRequests.tsx
new file mode 100644
index 0000000..f443eea
--- /dev/null
+++ b/frontend/src/routes/worker/ShowPendingRequests.tsx
@@ -0,0 +1,15 @@
+import { useQuery } from "@tanstack/react-query"
+import { useNavigate } from "react-router-dom"
+import { createBasicColumns, Table } from "../../Components/table/Table"
+import { Rest } from "../../util/Rest"
+
+export interface ShowPendingRequestsProps { }
+export const ShowPendingRequests: React.FC<ShowPendingRequestsProps> = (props) => {
+    const { data } = useQuery(["request", "pending"], Rest.getPendingRequests)
+    const navigate = useNavigate()
+    return (<>
+        {data && <Table data={data} columns={createBasicColumns(data[0])} onTableRowClick={(idx) => {
+            navigate(`change-request/${data[idx].request_id}`)
+        }} />}
+    </>)
+}
\ No newline at end of file
diff --git a/frontend/src/routes/worker/WorkerBase.tsx b/frontend/src/routes/worker/WorkerBase.tsx
new file mode 100644
index 0000000..e3f6c5c
--- /dev/null
+++ b/frontend/src/routes/worker/WorkerBase.tsx
@@ -0,0 +1,10 @@
+import { Outlet } from "react-router-dom"
+
+export interface WorkerBaseProps { }
+export const WorkerBase: React.FC<WorkerBaseProps> = (props) => {
+
+    return (<>
+
+        <Outlet />
+    </>)
+}
\ No newline at end of file
diff --git a/frontend/src/util/Rest.ts b/frontend/src/util/Rest.ts
index beaec24..769f680 100644
--- a/frontend/src/util/Rest.ts
+++ b/frontend/src/util/Rest.ts
@@ -1,7 +1,7 @@
 import { LoginRequest } from "../routes/login/Login"
 import { Building } from "./intefaces/Buildings"
 import { Keys } from "./intefaces/Keys"
-import { User } from "./intefaces/Request"
+import { User, Request } from "./intefaces/Request"
 
 //@ts-ignore
 const url = (process.env.NODE_ENV === "development") ? "http://localhost:8080" : window.location.origin
@@ -16,12 +16,18 @@ export class Rest {
     static getSelfDoors = async () => {
         return await this.quickFetchJson<Building[]>("self/doors", "GET")
     }
+    static getDoorsWithDoorGroupId = async (doorGroupId: string) => {
+        return await this.quickFetchJson<Building[]>(`doors/${doorGroupId}`, "GET")
+    }
     static getSelf = async () => {
         return await this.quickFetchJson<User>("self", "GET")
     }
     static getUsers = async () => {
         return await this.quickFetchJson<User[]>("users", "GET")
     }
+    static getPendingRequests = async () => {
+        return await this.quickFetchJson<Request[]>("request", "GET")
+    }
     static getSingleUser = async (userId: string) => {
         return await this.quickFetchJson<User>(`users/${userId}`, "GET")
     }
@@ -34,6 +40,9 @@ export class Rest {
     static getSelfRequests = async () => {
         return await this.quickFetchJson<Request[]>("self/request", "GET")
     }
+    static getSingleRequest = async (requestId: string) => {
+        return await this.quickFetchJson<Request>(`request/${requestId}`, "GET")
+    }
     static getSelfRequestsWithRequestId = async (request_id: string) => {
         return await this.quickFetchJson<Request>(`self/request?request_id=${request_id}`, "GET")
     }
diff --git a/frontend/src/util/intefaces/Request.ts b/frontend/src/util/intefaces/Request.ts
index d739a7e..ef84ac8 100644
--- a/frontend/src/util/intefaces/Request.ts
+++ b/frontend/src/util/intefaces/Request.ts
@@ -6,11 +6,12 @@ export interface Request {
     comments?: Comment[];
     created_at: string;
     description: string;
-    key_group_id: string;
+    door_group_id: string;
     pending: boolean;
     reject: boolean;
     request_id: string;
     requester_id: string;
+    requester: User
 }
 
 export interface Comment {
-- 
2.37.0 (Apple Git-136)

